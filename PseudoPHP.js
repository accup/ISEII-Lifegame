{
    const $02d = (number) => number.toString().padStart(2, '0');
    const $04d = (number) => number.toString().padStart(4, '0');

    const initialSaveData = [
        {
            name: 'pentadecathron',
            data
            rows: 29,
            columns: 30,
            created: '2018-07-22 22:00:28'
        },
        {
            name: 'グライダー',
            data: '0100000000000000000000100000000000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
            rows: 20,
            columns: 20,
            created: '2018-07-22 22:47:53'
        },
        {
            name: '重量級宇宙船',
            data
            rows: 9,
            columns: 58,
            created: '2018-07-23 01:29:50'
        },
        {
            name: 'グライダー銃',
            data
            rows: 50,
            columns: 60,
            created: '2018-07-23 01:36:55'
        },
        {
            name: '銀河',
            data: '0000000000000000000000000000111111011000011111101100000000000110000110000011000011000001100001100000110000110000000000011011111100001101111110000000000000000000000000000',
            rows: 13,
            columns: 13,
            created: '2018-07-23 16:00:22'
        }
    ];

    var accessLifegameStore = function (mode) {
        return new Promise((resolve, reject) => {
            const request = window.indexedDB.open('PseudoPHP.ISEII-Lifegame');
            request.onupgradeneeded = function (event) {
                const db = event.target.result;
                const lifegameStore = db.createObjectStore('lifegame', { keyPath: 'id', autoIncrement: true });
                for (const data of initialSaveData) {
                    lifegameStore.add(data);
                }
            };
            request.onsuccess = function (event) {
                const db = event.target.result;
                const transaction = db.transaction('lifegame', mode);
                resolve(transaction);
            };
            request.onerror = function (event) {
                reject(new Error("Failed to open the database."));
            };
        });
    }

    var getSaveData = function () {
        return new Promise((resolve, reject) => {
            accessLifegameStore('readonly').then(transaction => {
                /** @type {IDBObjectStore} */
                const lifegameStore = transaction.objectStore('lifegame');
                const request = lifegameStore.openCursor();
                const saveData = [];

                request.onsuccess = function (event) {
                    const cursor = event.target.result;
                    if (cursor) {
                        saveData.push(cursor.value);
                        cursor.continue();
                    } else {
                        resolve(saveData);
                    }
                };
                request.onerror = function () {
                    reject(new Error("Failed to open a cursor."));
                };
            }, reject);
        });
    }

    /** @param formData {FormData} */
    var insertSaveData = function (formData) {
        return new Promise((resolve, reject) => {
            accessLifegameStore('readwrite').then(transaction => {
                /** @type {IDBObjectStore} */
                const lifegameStore = transaction.objectStore('lifegame');
                const now = new Date();

                const insertData = {
                    name: formData.get('name'),
                    data: formData.get('data'),
                    rows: parseInt(formData.get('rows'), 10),
                    columns: parseInt(formData.get('columns'), 10),
                    created: `${$04d(now.getFullYear())}-${$02d(now.getMonth())}-${$02d(now.getDate())} ${$02d(now.getHours())}:${$02d(now.getMinutes())}:${$02d(now.getSeconds())}`
                };

                const request = lifegameStore.add(insertData);
                request.onsuccess = function (event) {
                    insertData.id = event.target.result;
                    resolve([insertData]);
                };
                request.onerror = function (event) {
                    reject(new Error("Failed to save the data."));
                };
            }, reject);
        });
    }
}

var fetch;
{
    const $fetch = fetch;

    class PseudoJSONResponse {
        constructor(object) {
            this.ok = true;
            this.object = object;
        }

        json() {
            return this.object;
        }
    };

    fetch = function (input, init) {
        return new Promise((resolve, reject) => {
            $fetch(input, init)
                .then(response => {
                    if (response.ok) {
                        resolve(response);
                    } else {
                        switch (input) {
                            case 'getSaveData.php':
                                getSaveData().then((saveData) => {
                                    resolve(new PseudoJSONResponse(saveData));
                                }, reject);
                                break;
                            case 'insertSaveData.php':
                                insertSaveData(init.body).then((insertedData) => {
                                    resolve(new PseudoJSONResponse(insertedData));
                                }, reject);
                                break;
                            default:
                                reject(new Error("Operation not supported."));
                                break;
                        }
                    }
                }, reject);
        });
    };
}
